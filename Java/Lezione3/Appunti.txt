L'interfaccia di una classe è l'insieme di tutte le proprietà pubbliche della classe (metodi, variabili
di istanza, ecc.) (ATTENZIONE - diverso dall'interface di Java - questo qui sotto)

Oltre a class, possiamo definire un tipo di dato come INTERFACE, ovvero definisco il tipo senza però definire
come è fatto l'oggetto.
    es. abbiamo fatto Point2D basato su coordinate polari e un altro Point2D basato su coordinate cartesiane.
Ma per me un punto potrebbe essere definito a prescindere da come vengono prese le sue coordinate, e questa
informazione la posso mettere all'interno di un interface

Una classe può implementare più interfacce

Point2D p = new Point2D()  -> p è un tipo STATICO, ovvero quello noto al compilatore



@Override - A cosa serve?
Serve a usare metodi dichiarati nelle classi che implementano l'interfaccia, in quanto la variabile su cui 
chiamo il metodo è del tipo dell'interfaccia (Point2D). Quindi di base non potrei invocare




---LEGAME DINAMICO/DYNAMIC BINDING--- (a tempo di esecuzione)
Si differenzia da quello statico (es. Math.sqrt()) in cui il compilatore sa già come eseguire il codice e salta
alla parte di memoria in cui è scritto il codice del metodo.

Nel binding dinamico, il compilatore NON sa che codice andrà a caricare in memoria, proprio come nel caso della
nostra interfaccia Point2D. Quello che succede quindi è che il compilatore sa che qualunque sia il tipo dinamico
(Cartesian o Polar point), implementa Point2D, quindi compila. Poi all'esecuzione, DINAMICAMENTE, la jvm
scoprirà volta per volta di che classe si tratta e verrà eseguito il metodo di quella classe.



---POLYMORPHISM---
vedi Main